sometimes Founders are afraid of asking the like the dumb question but that's a worthwhile question to ask but if you can help your customer make more money they're probably gonna like you this is Michael cybo with Dalton Caldwell and today we're going to talk about how do you give more than you take from your users maybe we should start with kind of a business 101 right like MBA in 30 seconds what do you think okay so the basic idea underpinning all uh technological progress um very basic stuff is if you sell someone a tool and if they can use the tool to make more money than the tool cost them boom you're creating value when people like it and so you know some very basic examples Google when they first launched Google ads it was very easy to buy Google ads you you would pay Google per click and you could sell stuff for way more than you paid Google so you would just do that all day long and make tons of money right very straightforward makes sense um talk about Excel and Microsoft Office Microsoft Office is a perfect example if you think about word or you think about Excel these are products that made normal office workers and normal kind of Financial workers literally like 10 do 100 times more productive yeah and so if you can make an employee 10 times more productive people probably buy and like that's cool buying a computer back in the 80s was expensive and buying Visa calc or whatever was expensive but it was still way positive Roi like five grand 10 grand no sweat because spreadsheets made them better yes okay classic examples so let's get to the problem there are a lot of Founders out there that are building products that deliver no or minimum value to the user classic fear is always like well I need to grow right the most important thing is to grow in order to raise money and so I'm gonna build something that kind of sucks because like or screw that it sucks right because most MVPs suck I'm going to build something that doesn't solve anyone's problem and just try to get money for it so that I can go raise money I think that's yeah it's like it's make something VCS want it's like something perverted yes thing that we are not fans of yes where you're like well superficially this resembles a software product that superficially people pay for yes yes and therefore we should charge a similar amount of money for it and like boom boom the specifics of what it does is details you know we we've got our top folks on that yes but we've talked about that before so that's that's an obvious yeah I think there's another one which is this fear of being a consultant I think one of the reasons why people build shitty products that don't solve people's problems is that when they start talking to a user and the user starts saying well here's my problem I could really use this this and this the founder starts thinking about that and thinking and fearing what if this user is different from every other user what if the problem they have is different and so what if I have to build something to make them happy I have to build something that no one else wants I think this is a core fear that happens because I think that every found in the back of their head thank you Reid Hoffman is thinking when can I get to Blitz scale like when when can I raise the big round and throw this everywhere and you know have everyone use my thing and every founder knows in their heart that if they're not making a simple thing that everyone's going to use they can't put scale it so I think this is the core fear I'm fearing being a consultant and It's tricky because like this isn't wrong yeah there's a kernel there's a there is a good idea in there yeah like there's a good there is an insight there is an Insight but I might argue it's exactly wrong when you're early maybe we should talk about that like what's the difference between being early and maybe not even understanding the problem well and being way later on when like being consultant is maybe more of a risk I think if you're not a deep expert on what the customer's problems are and how they make money and how they work most Founders you make assumptions about how their business should work which could be mistaken so again when the founders of Google started Google I would imagine they were not experts on Performance Marketing and how basically a lot of the early Google customers as I recall were mortgage refinance people yeah where they they would buy people searching for mortgage refinancing the advertisers would buy those clicks and they were worth a lot of money to them there you go and the founders of Google did not need to be experts on that but as they as they got users and they built the business model understanding what problems the the customers had was super important yes right I mean what are some other examples of like I mean we've we've talked about this before but the classic examples with twitch like we did not understand what streamers wanted until not only do we talk to them we started building things and so I think that like maybe the issue here is that if you be if you're being consultant early what you don't end up doing is learning enough about the customer and so the counter and true advice we're giving is basically forget your fear about it being consultant early dig in with some customers actually solve their problem and in the process maybe you're building some stuff that's went off yeah but you're going to learn a ton about the actual problem and then you'll have some insights on okay what's more generalizable what can I do that I can give to everyone and ideally understand the levers in their business that derives economic value like basically like don't make assumptions that you think you know how they make money or should make money yes kind of test those assumptions and once you have a better mental model that it's much it's much more clear how you drive economic value and what's funny is you can even ask them like you can even say like how can this help you make more money like you can literally you sometimes Founders are afraid of asking the like the dumb question but that's a worthwhile question to ask if you can help your customer make more money they're probably gonna like you I think one other area this applies that's counterintuitive is even in your customer Outreach because I think that a lot of times Founders when they're reaching out to customers even in that moment they're asking for more than they're giving right we see these emails all the time where you know hey I'm building X Y and Z software do you have 20 minutes to jump on the phone with me to talk about it you know is that not the definition of asking well I just want feedback yeah give me feedback your time customer Discovery yeah your time is clearly worth nothing like and I need you to help me and I think one of the things I've seen that works so much better in the initial Outreach is when you actually offer something you should give value up front now we had one company in the current batch that basically was helping with customer onboarding and they did this in the most simple way they actually took a video of the customer's onboarding flow of the company's onboarding flow and then provided their advice and feedback on what they could do to make it better now one that's the definition of Consulting right two absolutely doesn't scale but when they started sending emails with that content in there when they started giving us the first step with a customer started replying saying thank you I can use that like yeah I'm happy to talk to you about how you're thinking make this even better so I think in Outreach and in building your first products and dealing with your first 10 customers you can give more than you receive let's put this in historical context though because this giving before you receive is not new yeah this is a whole broad topic but just quick crash course the the history of computers involves giving away a lot of value for free specifically the original business models of computer companies were to sell hardware and software was like a thing you had to give the customer to to run the hardware to get value from it yes and so historically software was just free and not really proprietary and this is beyond the scope of this talk here but if you research the history of Microsoft people in the audience Bill Gates kind of pioneered the guilt trip to get people to pay for things I don't know go read his letter I'm not going to do a justice but the the the idea of proprietary software and charging for it was like maybe the late 70s um and you know before that there was the free software movement which equated software and code to Freedom many of the tools the power all everything to this day were created by hippies created by people with big ideals created by people that wanted to give more value than they receive so if you look at the history of GCC of all the compilers if you look at Linux the Linux kernel if anyone runs an Android phone that's all free software there'd be no Google there'd be no YouTube without Linux powering all the stuff yep um the same would get like every web browser gecko cage ttml you can research this thing also um sqlite is this free database that's in everything like I'll bet to just watch this video stream sqlite is involved like 50 different ways how many free products do you actually need and so this is part of the history of software and Computing and technology is to give out all this value and realize the value that it's created can create enough economic value for the creators for the people that make this stuff yes and also just unlock more value in the world than what they charge yes right and this is why this is why the graph of how technological progress is accelerating so fast is this factor of giving more than you receive yes and if you take some of their inspiration when you're building your products Maybe you can have some wild success yeah I think like if you leave a lot of the value on the table for your customers instead of trying to take it all yes then you're in the game and and the key let's be clear is your product actually has to solve the customer's problem like it all comes back to like all those free products all the products people pay for they actually solve the customer's problem and so if you can do that in the early stage instead of being afraid of consulting or afraid of fundraising bam you have an advantage all right man great great chat [Music] [Music]