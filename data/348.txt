without any further delay I will introduce to you Michael Seibel the CEO of Y Combinator the founder of companies like justin.tv and twitch and Socialcam to begin what is going to be a deep dive into product over the next several lectures Michael so before I begin its kind of had a conversation with Jeff and I and I wanted to say a couple of things about my experience at justin.tv and and twitch so what I will say is that we broke many if not all of the rules that are about to tell you at various points during our company the things that allowed us to survive were one our founding team was extremely technical Justin Emmett and Kyle all were amazing to work with and basically what I found amazing about them is they were not intimidated by any technical challenge I think that I would not be standing here if I wasn't privileged to work with them and so I think this is something that a lot of companies a lot of startups a lot of sort of founders don't truly understand like that fact allowed us to break a lot of rules the second is we didn't spend a lot of money we moved out when we were 21 22 22 and 23 we lived in a two-bedroom apartment that apartment cost $2,500 a month we were each given $500 a month walking around money which technically is against the law because it was below minimum wage but who cares about laws and that was it that that was the game Emmett got his own bedroom Kyle and Justin slept in bunk beds I slept in the living room and sometimes on the balcony we just didn't spend much money that gave us a lot of ability to screw up and make mistakes and then I say the last thing that was kind of interesting I only realized later is that our ego was highly tied to our startup we were not doing a startup to have a cool resume item it was really the only thing we had done on our own and so I think at various points during the company when it looked like we would fail basically our startup failing was our life failing right it was like well this is the only thing you've done so far and so if it fails you get F on life and I think that we all had that feeling very internally and therefore we just couldn't really conceive of giving up so I think more than anything I want to say in the rest is presentation those were the three things that saved our company made our company work and strangely I don't even think if you take one of those things away any one of them we would have died so this isn't one of those things where it's like oh you can grab for one or two and that's pretty good we needed all three or else game over so as I get into product I'm gonna tell stories from justin.tv from really early days at which when I was still there and then also from a YC company from a couple batches ago named poppy it's a company that I've advised since so invested in did YC great founder name off knee and weirdly I just feel like I needed to do a case study outside of my own story somehow it's gonna help share these lessons a little better so I always like to start with what problem are you solving because when I'm pitched by founders most often they just want to tell me what their idea is what they're gonna do what their product does I think what's interesting is that like oftentimes they don't even know why they don't know what's the problem that they expect to be solved at the end of what they're doing now I think that for some businesses is totally fine right I think that especially if you're early on especially if things are still in project phase whatever but I think at some point pretty early on you have to figure out what are we doing and what do we expect the result to be so at justin.tv the first thing the problem we were solving was entertainment we were making TV shows Justin was the first one broadcast his live 24/7 this was to be a TV show so actually pretty easy for us to understand whether that was working or not is anyone watching right that's the problem we were solving people watch TV shows no one was watching so we didn't solve the problem then when we pivoted to an open platform the problem became can we let anyone broadcast live but that was problems trying to solve anyone can broadcast live on the Internet and once again once we understood that it was very easy for us to judge whether or not someone could do it we had this open platform as anyone using it but I think that like that was key to what we were doing and then sometimes when I talked to founders there's something they want to do in the world there's a problem that they're kind of vaguely interested in or there's an idea that are vey interesting but they really haven't nailed down what's the actual problem we're solving if you don't know the problem you can't know whether you solved it the first thing I asked founders can you state the problem clearly in two sentences if you can't you don't know the problem right in fact it's really only take you one sentence so if someone asks you a problem you're solving and you find yourself delivering an essay you're doing it wrong - have you experienced the problem yourself this is not always required but is certainly helpful I've met a lot of founders who are trying to solve a problem for someone else who they've never met never talked to and don't truly know whether that person exists in the world and so all things being equal this is a great hand that you're on to something well at least one person has had this problem before the next one's can you define this problem narrowly what's interesting is when you get started you can't really solve this problem for everyone who has it so when justin.tv first started we couldn't let anyone broadcast live video you had to have a laptop you had to have go to internet connection you had to have a webcam there are all these kind of things you needed and so can we actually now talk about all right we want to make live video for everyone but let's talk about the people that we can address first who can we help first and I think oftentimes founders kind of want to skip that step they want to solve the mega problem like I want to cure cancer I'm only talking about when everyone's cured as opposed to like what can we address immediately how do we get the first indication that this thing is working and then the last one is the problem solvable so here's what I'll bring up with poppy so poppy is a company that's essentially uber for babysitting they make it really easy for babysitters I'm sorry for parents you need babysitter's to get babysitters poppy is a very interesting company because you need babysitter's for a lot of different types of things some people need a babysitter five days a week while the parents at work right that looks a little more like a nanny some people need a babysitter whether it's an emergency oh I have you know I have a medical emergency and I need a babysitter right now because I need to go to the hospital some people need it because there was miss planning oh I thought well housing was gonna be at this time and it wasn't I thought I was gonna be here this time it wasn't I need a babysitter some people need a babysitter because they have an infant right and so this baby students have a bunch of skills some people need a babysitter to watch their 15 year old to make sure they don't get you know out of the house different skills and so what's interesting is that if you just start with oh we're gonna help people get babysitters it's not really good enough to understand what you can address right away right which one of those use cases do you want to address if you were to state the problem more narrowly though let's say we wanted to start out with infants right we want to make it easy for parents to get babysitters for infants then we can really ask the question is the problem solvable I think one of the things that poppy discovered when operating their business is that the level of skill that you need for a parent to trust you with their infant when they haven't met you is very very high so the idea that you're going to have a rotating set of people you haven't met watch your little baby hard very very hard they have to be very skilled and then on the flip side uber model only works because there's a whole bunch of basically replaceable people with a common skill well it turns out the people who've got the skills to watch infants and make parents comfortable with that tend to have nanny jobs where they work lots of hours and tend to be paid fairly well especially in up-and-coming cities and so now we have this disconnect where it's like well we want to solve the problem of infant watching for moms but that talent pool who can solve the problem the supply of babysitters they might not exist problem might not be solvable and so going through this exercise in real time like with your products out in the world you should be thinking about these things you should be thinking how have I narrowly defined the problem I want to solve first and you should be always asking yourself is it actually solvable I think a lot of founders just don't want to think about this because it's hard it's hard to think about who you want to talk to first it's hard to understand oh maybe I can't solve that problem I have to move on Abney was a mother of two kids and she was really pissed she couldn't solve this problem because it was her problem but it's turned out to be very very hard problem to solve you know young infants on-demand babysitters all right the next question I always ask is who is your customer and really you don't understand the problem you're solving until you understand who you're solving it for a lot of times people just want to say everyone everyone's the customer right and that seems like it makes sense in some cases right if you're building a social network or a search engine right everyone uses those things now what I will say is that in almost all of the products that everyone uses now there was a time when almost no one used them and the creators of those products had to figure out who is the ideal first customer and so if you don't have a good answer to this question you're gonna be lost do you have no idea who you should talk to to ask them whether this problem has been solved and you have no idea who to talk to to figure out who this product is for and I'd be surprised the number of founders who are just building something as if they were writing a creative novel where it's just a product of their own brain and no interaction with anyone on the outside and it's not even problem that they're solved that they've experienced themselves don't do that don't be one of those founders like you can talk to your users you just have to figure out who they are the next question I often ask is how often does your user have the problem what's so surprising is when you talk through startups with people sometimes they choose problems without quite understanding who the user is or the frequency of the problem so give you an example a lot of people will come to YC and a popular idea back in the day was to build a car shopping website now if you guys have been on car shopping websites especially about five years ago they all basically suck they're they're hard to use they're not very transparent you kind of want to have this almost Tesla experience of just buying a car but they never actually work out that way and what's interesting is that like a lot of founders come back to this problem over and over and over again and they always think that their customer is the person buying a car now the reality is is that when you go buy a car assuming it's not a complete lemon you typically keep that car for seven years so what happens if I told you I'm going to create a start-up and if I home run with my customer if my customer loves me they're gonna come back seven years from now that's hard it's very hard it turns out a lot of the car buying websites are not built for the person who's shopping for car because that person doesn't have a problem very often they're actually built for the person who's selling a car that person has a problem every day every day the dealership has to hit their numbers and so you don't see as a customer how that product helps the real customer the person who's trying to sell cars and so by doing this analysis I really try to push founders in understanding who is getting the most value out of this product and it's really helpful if you're trying to help someone with the problem they have frequently if you think about the products that you use on a daily basis they tend to be on the front screen of your phone you tend to use them without even thinking they become almost extensions of you if you think about apps that you've installed and then they're kind of on the third page in the back or they're buried on the second page is some folder those tend to be the ones you don't use very often hopefully they don't need you to use them very often or else they're probably not very good businesses the next question I always ask is how intense is the problem I find a lot of founders think they have a good idea but they don't do this frequency and intensity analysis and so if you have both an infrequent and low intensity problem that you're trying to solve you're gonna have a problem getting a lot of customers even interested in talking to you um all things we go if you graph problems it's nicer for them to be higher intensity higher frequency let's think about a company like uber for example usually when you are somewhere and you need to go somewhere else it's a pretty intense problem I have to go to work I have to go to the doctor I have to go pick up my kids they're so intense you might have bought like a twenty thousand dollar car to help you do those things right so it's an intense problem and then when you think about frequency how often do you move more than a mile more than walking distance every day happens a lot and so if you think about that even though you look at the taxi market and you say ah taxis unit before Hoover taxis that's not that big of a market if you just look at the customer you say high intensity problem that happens very often there's probably a good business here the last one is are they're willing to pay so many founders who come into YC their first thought is completely wrong on this front their first thought is I need to give it away for free because that's the only way I'm gonna get users one of the things that I always push them to do is think about it this way if you want to know whether you have a good product it's a lot easier to make it a little bit harder for your users to use it and then see if they use it anyways because if I am really intense problem and you say well it's gonna cost 100 bucks for the person with extremely tense problem they probably think that's a deal if you have extremely and if you don't have extremely tense product problem you charge zero dollars you can have a bunch of users who come in who don't really have the problem but they're just trying something out if you try to learn from them on how to improve your product oftentimes they'll lead you astray so strangely starting with a higher price or a price is almost always better than starting free almost always better and if you have to start free you need to do this analysis of how do you talk to the users where the problem is actually intense I talk to the users who are using a product frequently in production for real-world purposes as opposed to the hobbyists talking your customers is good but talking to the wrong customers very very very bad I've seen a lot of companies that are basically hijacked by bad customers especially companies where there's real-world costs so for example you know if you have a company like poppy there's real-world costs in recruiting managing and working with all of these baby sitters and if you have a company if you have a customers trying to basically take advantage of that system being laid being non-responsive being rude to the baby sitters that's not going to help you run your business and you'd be surprised at how many hijack customers there are out there the last question I always ask people is how easy is it for your customers to find because inevitably you're gonna need to reach them and what's interesting I look at the the last batch there are two b2b companies one b2b company was here in America and it was very easy for them to find customers they could basically go to LinkedIn find their customers on LinkedIn find the name addresses email them they get email thousand customers a week another company doing b2b was in China and interesting enough reaching out over email and the b2b context in China just isn't - well done practice getting access to people's email addresses is actually not very hard not very easy and so strangely they had this challenge of a relatively simple business to explain a real intense problem that happened often if they had no way to reach their customers and to basically invent new ways to do it and so I often want to ask this question because if your customers are ridiculously hard to find you better have a solution for that upfront you can't build the whole thing and expect for them to find you and so often times you had a situation where someone's trying to build a product for either an imaginary customer or a customer who can't really hope to use the product I'm trying to get water to people in the middle of a desert in the Sahara all you need to do is download my app and go online and then they can put their GPS location and then we'll deliver water to them that's not gonna work but you'd be surprised at how many people just don't think through those logical steps all right next up does your MVP actually solve the problem that you want to solve this one is so hilarious how often it comes up because in the process of building an MVP things just go weird and squirrely so you had this problem and then you started building it and then you talked to other users and then before long you're launching something and then you realize it doesn't actually do the thing that you promised and even the thing that you want to do so part of your process of building the MVP it's really helpful to do these pre steps first it's really really really helpful because then you can always gut-check yourself on am I actually solving the problem the other thing is that it's really helpful to build your MVP quickly typically the longer it takes the more you're gonna have MVP and problem drift or customer drift if you decide to only build your MVP in two weeks it's a lot easier to stay on task and make sure actually solving that problem for that customer the way you test this by the way is you give your product to customers like you you have to do that that is a required step what I find interesting is that a lot of people think of their product as a painting as something that could be appreciated as a piece of art as something that even if it's appreciated by one person is special that's not what you're making products are not paint they're not art if users don't find products useful then the products are by definition not useful and they're a waste of your time to build and I think a lot of people want to be artists the startup world is very unforgiving to artists and I think that interestingly after the fact a lot of people are painted as artists right like Steve Jobs is painted as this like magical artist right and the other day he had to figure out how to get make a phone that millions of people would buy if only one person bought the iPhone he would be seen as a failure so the definition of art is it only has to be appreciated by one or maybe even none that's not the appreciate that maybe just the Creator that's not the definition of a successful product so this is what you should always be got checking does every piece solve the problem the number one problem with this question is that it hurts the answer hurts you're gonna find that a lot in startups where the answer hurts you know doesn't solve the problem but as long as we don't talk about it maybe nobody knows it doesn't solve the problem a lot of the answers inside of startups are feel that way which customers should you go after first a lot of founders are very confused by this question what I find interesting is just like the instinct is to go after customers by making the product free for some reason I find a lot of people think that their instinct should be to go after the hardest customers first almost as if it's like a proof like if I can get this impossible person to use something then like it'll be easier I know that I've made something good I like to start from a different point it's an MVP you know you've made something bad like that's the definition of MP it's bad so the real question is like how do you find people who are willing to use a bad product right there have to be the most desperate the most desperate and so a lot of times I talk to founders I really pushed them towards who are the most desperate customers and how do you talk to them first that's what I define as easy desperate if you're having like a you know if you're trying to sell a simple piece of software to someone thousand dollars a month and you're engaged in a six month conversation with a company that's not a desperate company move on in fact when you're doing enterprise sales early as a start-up like you're looking for even more desperate customers just because literally takes so long to sell them so if you don't feel like you're dealing with desperate people if you feel like you've dealt you're you are trying to get impressive customers who aren't desperate you're probably doing it wrong literally the number one thing I often tell found is just like whose business is gonna go out of business without using you which people out there are not going to be able to get to work or to watch their kids how do you find the people who are just literally are screaming for something like this and then how do you talk to them and not talk to your friends I had a bunch of friends who were using social cam right my company was doing video for for sharing with friends and they weren't really using it they were using it because it was like my app and there were friends with me I literally had one friend it was like super honest about this Steve the CEO of Reddit when we sold Socialcam he literally said thank God now I can delete this app from my phone so the perfect definition of someone you should not be trying to get product feedback from right and so he didn't have the problem we were solving many of your friends won't have the problem that you're solving make sure you find D and by the way the kind of community of start-up people and/or investors usually don't have the problem that you're solving so if you're using investors as a trigger for am i solving the right problem or like do they find this useful it's almost never the case almost never the user of a product that comes into I see and so ignore your investors ignore your friends like they will lead you 100 percent astray out of good intentions they'll try to be helpful well at you know I've never lived in the Sahara I've never been thirsty but maybe it should work like this right live like horrible run away run away once you start having customers I think it's a very helpful exercise to try early to identify by bad customers these are people who are blasting your support these are people who are constantly constantly complaining my co-founder Justin he had a company that was basically on demand personal assistant and he was the first one who I met who actively fired a customer is basically uber for personally support systems called exact and literally a customer would have the exact do something like like crazy like something you couldn't do right like we organized my house the way I want things organized and I'm not gonna tell you I want them organized or go shopping for me but I'm gonna critique every single like piece of fruit and vegetable that you picked out she was like completely unrealistic expectations and so after refunding the person four times for four different tasks the person did a fifth task on the product right because he's getting a bunch of value for free and Justin Cosmo says you're fired you can't ever use product again like look for those people because if you aren't delivering anything of value there will be people trying to exploit that value and some might be doing it not out of the goodness of their heart so don't let these people lead you astray we talked about this don't discount now here's a caveat on discounting Parker from zenefits came to I see a couple years ago and he gave this great talk about enterprise sales and zenefits his product that's given away for free so it's actually kind of a interesting enterprise sale and one of the things he said that really got to me was that there are ways to convince organizations basically you can structure discounts and incentives into your sales pitch if you basically understand what value are getting back so his example was he would try to sell to a company to switch on to zenefits for their health care and he would say look because of this third party let's just say AWS has given us a discount who knows why right we just bought dedicated instances so now we have 40 percent lower AWS bills so we can actually pass on some benefit to you but only for the next 30 days now I feel horrible even telling you this because I want you to take as much time as you need to buy my product I would just hate if you bought it on the 31st day and I couldn't give you this discount now this isn't a let me give this away for free like because I'm afraid people won't use it this is a very structured process that he did he basically incorporated a deadline based on some third party providing a benefit to the customer and he knew that when he said this to the customer every time that this was talked about internally the deadline would be brought up and the discount would be brought up and suddenly this has now become not a way to be afraid right - oh I'm not sure how many customers minutes make it free became a way to speed up the process and his discount was just baked in like he just priced the product 15% higher so it's like literally like that is the way to do it the way not to do it is I'm afraid no one's gonna use it so I have to talk not charge any money okay the next is how to set up metrics how many of you are using Google Analytics as your primary metrics products raise your hands okay you are doing it wrong yes so setting up metrics is something that's like super important very early in your company because it's how you know whether your product is being used or not and it's one of the number-one sources of new product ideas and inspiration so Google Analytics I would say is a great product for knowing how many people came to your website today and how many pages they viewed which used to be relevant and it's not really relevant anymore and where they came from um what it's not a great product for is identifying what people's actions were when they were using your product did they click this button did they see this screen how long were they on the page for before they did something else did they leave something in their cart for all of those things you want an events based metrics product Mixpanel amplitude heap I think we've funded like 50 of them they're like 100 of them out there you should be using one of them if you're not you can't be sophisticated at building your product this is just kind of a prerequisite so get on it and this goes back to the early thing that I mentioned which is technical teams for a technical team implementing Mixpanel is ridiculously easy for a non-technical team it's basically impossible this is just one of the many advantages of having a highly technical team you actually know what users are doing without this you're just missing a huge part of what you need to know the next thing and Suhail from Mixpanel gave a great talk about how do you set up mix panel one of the challenges of setting up mix panel is the second that you're sitting there saying I want to track what my users are doing you can come up with like 150 things your users can do with your product and you want to track all of them that's often a mistake if your analytics product is got too many analytic sitting in it in the beginning it will be hard to use and part of what you're doing if you've never used product like links panel before is learning how to use it and most importantly teaching your employees and your co-founders how to use it because this product should be a product that everyone in your company understands how to use is everyone your company should understand how the product is functioning this is not something that like the CTO uses and creates reports from this is interactive product that everyone can use so to start pick five to ten simple stats let's take Instagram as an example right if I went to pick five to ten simple stats for Instagram let's say open the app trade in an account took a photo applied any effects share the photo that's probably all I need in the beginning right I mean the number one mechanism for Instagram is taking a photo and sharing it I can track that I'm pretty happy the other thing that I will warn you about is that if your product is good the naming conventions for these stats are going to become very important because one day there will be a hundred or even a thousand stats you track so think a little bit ahead of time and don't name something something that only you'll understand make sure that you if your company's good many many people have to look at the stats make measurement a part of your product spec oftentimes when I talk to founders they say we built it on this release and we'll add the measurements some point in the future I don't understand how that works you build something you want people to use but you're not incorporating the measurement that tells you whether people are using it that doesn't work building measurement is part of a product spec so when you spec out a product you better spec the stats you expect to be tracking and you should also spec the stats that you think are going to improve when you're building that product that should be part of the spec it should be part of the first release otherwise you're flying behind and this is just countless times a justin.tv this is screwed us okay part development cycle so justin.tv was and twitch was three yell kids and one a mighty kid yell probably the most productive skill you're taught is how to argue with other yell kids and so the number one way to get products developed at justin.tv was to win an argument with the three yell kids kyle disliked this so much that he actually switched his sleeping schedule so that he wouldn't have to be involved in these arguments so we were awake from about 8 a.m. to about 12 midnight he would wake up around 11:00 midnight and write code all night and then go to sleep in the morning so he wouldn't have to argue with us on what stupid thing to build one of the classic arguments at justin.tv that lasted approximately three months was the background color for the original site so the original site is just one page Justin wanted a black background I wanted a wood grained background three months of bait we settled on changeable backgrounds so there were five background options clearly idiotic like I said we made many of these mistakes um we didn't actually really learn how to do product development cycle until we failed at it for about five or so years and during that time this is what bad product-moment cycle looks like one we would release every three months for a web only product that is horrible second we would have a product meeting and we wouldn't write anything down right it was just four of us can't you remember you're an idiot if you can't remember a conversation before people had right and if you forget something just ask one of the other four people in the room right No so as a results during the first month of the dev cycle we'd all go off working on slightly different versions of the thing we wanted to build because we didn't write down this back then at the end of that month we'd come together and we'd be like oh wait this isn't we're not really building all the same thing and then we'd have another product meeting where we didn't write anything down and go off and build again for another month at this point right two months in we probably have about three weeks of productivity and about five weeks of just stuff that's gonna have to be thrown away at this point in we kind of come back together and realize that we're not 2/3 of the way done through this sprint were less than 1/3 of the way done and we're starting to get sick and tired of this feature that we're building so then we basically say alright slash-and-burn let's just make a shitty version of it and we take another month to do that now we've worked on this product for three months if you had any good or new or interesting ideas during that three month period of time you were told we're already working on something else so your ideas are worthless just write them down somewhere whatever we're working on this thing right now at the end of the three months instead of wanting to iterate we were sick of the da TM feature we just spent three months building poorly so we would launch it and if it wasn't used right away we would come up with some new brainstorm on some brand new feature that would rescue the company this is the wrong way to run a company it was absolutely horrible I was talking to Jeff earlier the major product decisions that justin.tv made that carried through to twitch - today was chat on the right video on the left we decided that in 2006 it is the same way 2018 the vast majority of the products issues we made were and never saw the light of day because they went through a process like this so if your process revolves around arguing revolves around not writing speck revolves around long dev cycles you are doing it wrong you are 100% doing it wrong what I'm gonna give you is a model of how we figured out how to solve the problem steal as much or as little of this as you want but understand that if you have any of the symptoms I'm talking about you need to solve them or else your company is just going to be much less productive than it could be first you need to actually have a number that you track that reflects how good your company is doing almost always if you ever are going to charge money to your customers this number should be revenue almost always if you are never going to charge your customers money like Facebook then maybe it should be a usage based metric like how often do your customers come back every day like DEA use it is almost always one of those two usage if you will never charge the customers money if you will charge the customers many people will invent reasons why these two metrics don't apply to their business one percent of them might be right 99 percent of them are probably wrong whatever this KPI goal is make sure you're measuring it make sure that everyone in your company knows what this goal is every day helpful to put it on some screen somewhere if an investor asked you what your KPI is you not only should be able to say what it is sheíll to say what the metric is you say where the metric is now where it was three months ago where it was when you started this is kind of table stakes the next thing that we would do is as the kind of product person I would come into the meeting and I would say this is the KPI we're looking to improve this this cycle at Socialcam the top level KPI was da use and the three ways that we thought we contributed to da use was either new users retention of users and new content created those three things so every cycle we ran one of those three numbers moving that number so that the right direction was the goal and we'd run an open brain brainstorm for us would take a couple hours and it was a real brainstorm it wasn't the brainstorm we're like you say what about this and your co-founder says that's a dumb idea that's not a brainstorm the real brainstorm is that any idea that's stated is written on the board the cool thing about these brainstorms is that everyone's computers were always open to Mixpanel so if you had an idea or you had a thought you could always just go in and check the metrics and see like oh is that right or is that wrong you'd be surprised at how much value there is and seeing your idea on the board not everyone's gonna get to have built what they want to have built but the fact that your idea was considered and added to the board actually makes people feel a lot better than otherwise people feel horrible when their ideas are shot down CEOs their job is to make their employees not feel horrible all the time sometimes I think CEOs think their job is to shoot down ideas it's not it's not gonna help you at all I mean everyone by the way in our company participated in this brainstorm at that point that was for people so easy to do the next thing was we did what's called easy medium hard so our brainstorm was actually typically split up into three categories new features or iterations on existing ones bug fixes and/or other maintenance and tests a B tests we want to run we have a whole board filled out with ideas on these three categories and then we go through and do what's called easy medium hard for us hard mint it would take one engineer most of the dev cycle to build medium typically meant to take a day two days easy means we could do multiple in a day this is extremely important how many of you in this room do not know how to write code raise your hand there we go I am one of you it's extremely hard if you don't know how to write code to figure out whether your idea is easy to build or hard to build that's something that you actually learn as a skill over time and this process basically is the process that can help educate you it turns out that easy ideas get built way faster way more quickly than hard ideas and it turns out that most hard ideas can be restated as an easy idea if you just understand what bits of your heart idea are both useless and hard and most of the time there are useless and hard bits and hard ideas that can just be removed and so for us this was educating everyone the team and for us we had a cross-functional team so someone might not realize that this is really hard on the video system it might be an easy web feature but hard on the video system or vice versa so this was basically educating everyone a team on what's easy medium hard it also created an objective standard by which to start thinking about these ideas instead of just based on the argument ability of the person delivering them it was like well your idea is like really freaking hard and seems like it wouldn't move the numbers that much based on Mixpanel whereas like this other person's idea is super easy and probably can move numbers a lot the next thing we would do is we decide hard first so we look at all the Harz and we say which hard is gonna impact the KPI the most and then we move to Easy's and then we move to one with moved at mediums and then we moved to Easy's what was interesting is that like just with the ideas on the board and with easy medium hard a lot of the ego was removed from the debate because one you knew your idea has been considered and two you'd sent some objective measure about how hard it was and three because the board has a bunch of ideas on it now it's probably pretty easy for you to find an easy idea that you really like and so you're just gonna be excited that that's probably gonna get in and you're really hard idea that's fine if it doesn't the next step is you have to write the spec this is where everyone  up the meeting might be going on for four hours now and this is the step no one likes you actually go through and you actually write down what do we mean by we're adding video filters to Socialcam what do we mean by were allowing people and justin.tv and twitch to chat with one another what does that actually mean how is it going to work this is really important and once this is done you can then distribute tasks to the team now we would run these cycles every two weeks at Socialcam because back then summing to the AppStore took longer if you're doing a pure web product you can run these cycles once a week the rule that we had to make the team not hate these really meetings is the only meeting we had this is the only meeting and so it might take two hours it might take six but for that to occur period of time there were northern meetings in fact for me being a non coder my number one job was to shut the up because I could create a problem right we're busy working we have this written spec everyone knows what they're doing if I have some brilliant idea during that two weeks right that'll throw the whole thing into chaos suddenly the written specs not important we're back to the drawing boards or we're changing things Yeti ID Etta what I had to realize is that every two weeks we do this over again so for that burning idea just wait two weeks and we're gonna have the meeting again and then we can get it in and turns out you're burning ideas probably wrong so it's totally fine to wait two weeks to try to kiss people do something wrong is totally fun as opposed to like having this cadence meant every two weeks we had success every two weeks if we built what we said we were gonna build we felt good and then that cadence meant that we'd go into the next cycle and do even more this cadence is extremely important because it's going to take you guys a long time to find product market fit maybe trying a lot of things we iterating a lot and if that process doesn't feel fun you're getting very frustrated this made the process feel fun because we had goals and accomplish them versus iterate a lot of YC companies a lot of founders in general will tell me our thing isn't working it's been two months it's time to pivot when I think about that statement it blows my mind right you're building a new product for a customer who might not have ever used the product before you're oftentimes exploring a problem that you only know to some degree or you've only experienced it personally what makes you think two months is enough time to know whether you figured something out what impressive thing only took two months to build so if you're not thinking that the process of coming up with a solution for this problem is probably the more like a two-year process you're doing it wrong if you are unsatisfied with significant progress in under two years you're probably doing it wrong it's going to take time you're doing something hard if it was really easy someone else would have done it so I define pivot as changing the customer or changing the problem this should be rare this should happen infrequently many times this means you should start a new company i define iterate as changing the solution it turns out you had the right customer you had the right problem your MVP was shitty and it didn't work we need a new solution it turns out maybe your MVP was great but it didn't solve the problem with a new solution it turns out you showed the product to your customers and they didn't want to use it even though they have burning problems we need a new solution often times I see this in Reverse people think solution first and when cut the customers they thought didn't like their product they try to find some other random customer who does he might even have a completely different problem and they tried shopping around their solution because they think their solution is the genius part I think the problem is the genius part I think identifying a problem that other people haven't figured out is worth working on is the genius part right Facebook wasn't first a social networking and Google wasn't first a search engines their genius was understanding that the people who came before them hadn't solved the problem and if they could solve the problem better they'd built huge companies their genius wasn't oh we built this cool thing let's just figure out who might want to use it wrapping up a little bit here I always tell the story about fake Steve Jobs versus real Steve Jobs a lot of people think that Steve Jobs is this person they should emulate but they have a false picture in their heads of what Steve Jobs was they think that like he dreamed perfect ideas out of his head and into the world and what's funny is that I think often times people look at the iPhone as perfect example of this but they look at their iPhone today your iPhone today is magical the first iPhone sucked in almost every way and they don't realize that Steve Jobs wasn't somebody who was just not iterating who just imagine your perfection minute one Steve Jobs was iterating at every step so I like to remind people what the first iPhone did first iPhone no 3G back when 3G was a standard feature so you have this great internet browser but you can only use it on edge which means it sucks right one carrier oh you don't have this carrier sorry switch carriers figure that out horrible battery life screen cracked all the time no App Store you can't even download other apps that was the first iPhone everyone forgets that iPhone so if you are the person in your company who is being fake Steve Jobs is saying the product has to be this way because what I said the customers everyone else you make the product the way I want it to be you're being fake Steve Jobs real Steve Jobs released a shitty MVP that was revolutionary but still fairly shitty and every year iterated it until you have the thing in your pocket right now which is pretty damn good real Steve Jobs iterates and talks to customers fake Steve Jobs just dreams and creates art don't be fake Steve Jobs okay so with all this I want to go back to the beginning what I said the beginning still holds justin.tv the only reason why I actually even know any of these rules is because we broke all of them the one thing that justin.tv and twitch had was a really strong technical team with high ego in the product and lo burn when we started figuring things out with twitch it was very interesting gamers had been on our product the whole time gamers had been streaming on justin.tv since almost the beginning at any given time there were twenty percent of our traffic for years we ignored them we ignored them we ignored them we ignored them ignored them they still use the product we didn't build features for them they still use the product they must been pretty desperate because they still use the product year after year the number one thing that changed when we started working on twitch we started talking to them and what's weird was it's not like we were talking to other users and the only reason we didn't talk to any users we had this like crazy part development cycles we couldn't do that with talking users too so what we did in the beginning was we literally just sat down with these gamers and we said what did you want and what's funny is we didn't build them anything very special they were like oh like lag socks or the couple they wanted like little things what was great about it was they realized we were now going to build something for them and no one on the internet was building things for these gamers and they realized that when we said we're gonna build something it came out when was the last time that you talked to someone building a product that you like and you said can you do this and they did it was last time you suggested a feature to mark at Facebook and then the feature came out never like it's one of the magical things you can deliver as a startup is you can talk to a passionate user and then you can build what they want and then you can say here it is and they will fall in love with you even if those features are relatively mundane because let's switch today chat on the right video on the left the same product what was great about this process was by talking to them they realized that we were on their side we realized they were building something for them so they tell their friends that was the major change if we didn't have the technical team if we weren't sheep if our ego wasn't involved I never would have gotten to that point and if you look at the history of justin.tv in the first five years it went from being worth nothing to being worth about twenty four million dollars in the next three years it went being worth twenty four million dollars touring worth a billion like that's what software can do when you when you hit the right customer let's do a couple questions in the back so you've mentioned that product so the question is put it more generally should you be going free if your final idea for a product is to be free what I would say is this if your users are users who you never plan to charge then it's totally fine free to be free but if you do plan to charge them in some way it's really helpful to charge them as soon as possible because you want to know whether or not they're willing to pay and certainly if their business depends on it it's especially helpful to charge them so that's the measure that I would use and they're all kinds of little tweaks and and so and so forth but at a high level do you ever plan to charge them I charge them if you never plan to charge them you can plan to monetize based on ads which is really usually the way that you never plan charges you can monetize with ads if you're not going to monetize with ads you probably should start charging them all right next question revenue if you're metric if your KPI is metric do that if your KPI is revenue and the number is zero should you still be tracking that as your top-line KPI the short answer is yes you should be depressed looking at that number every week too but that's that's the answer now let's be clear like I said with Socialcam right there are contributing numbers to that right and so whereas like DEA use was our top-line metric right we also the things we thought contributed to that new content new users retained users those numbers we can move so if you're in a sales type business your KPI number one revenue if it's zero that should you in face zero zero zero horrible but then you should ask yourself maybe your three other metrics are how many conversations did we have this week how many people are in contracting how people aren't onboarding right and those can be your three numbers that will if those numbers move you expect the revenue number to move and they can keep you motivated but your your top-line KPIs no like absolute no good we're a hardware company pre-launch and so our users our target market experience our problem five to nine hundred times a day and the intensity is can we pay our rent or not but we'd like to offer pre-sales as a way of getting the product to market do you guys have any tips on doing that do we have any tips on pre-sales what I would say is that there are many many tips on pre-sales I would email some founders who've done it before that's one of my best tip is to email them and ask them what they did the number one mistake I see with pre-sales is discounting the number one mistake is that basically especially hardware founders will misunderstand how much they need to charge so they don't lose money and so their presale becomes their death so I'd avoid that all right two more quickly and the way back what was the hardest part of having a slow burn well we were young so it wasn't hard at all we were living like we lived in dorms I think it's a lot harder now right I've got a kid I got a wife got an apartment got a car it'd be really hard now and so I think really the hard part about slow-burn is can you adjust your lifestyle if you've already leveled it up and if you haven't leveled up your lifestyle yet and you're still working you know if you're young and you're still working at a company that's paying you well not leveling up your wife style is a big way to stay ready to do a startup adding on the mortgages and the cars and the vacations makes it a lot harder I just know a lot of people who never could come back from that absolutely her back going from beta how do you go from beta to early MVP I don't really know what those distinctions are like all I know is are people using your product yes no like if people are not using your product get to the point where people are using your product extremely quickly once people are using your product there's all different labels for it beta pre-launch alpha blah blah who cares right it's just that's the dividing line like are people using a product the next question is are you actually solving their problem that's the next question not like are we following this line of launching things most YC companies will launch many many many many times so that progression isn't really that important are people using your product great BAM you're launched congratulations call whatever you want all right this is a great question and I have I'll have an unsatisfying answer so the question is basically how do we figure out what to build next here's my answer the reason why you have a part development cycle is that you can work on multiple things usually there isn't a right answer usually all of the things that you want to build won't work so what you need to do is you need to create a process in your company to build things quickly so that you can actually see whether they're work or not and then you can iterate them from there so it's far more important to have attack tactically talented team that can build MVPs quickly in a non frustrating way and then measure the results than it is to be a super genius who can imagine what's going to happen in the future without actually knowing now I'm the big picture you have to have that imagination for your vision for where it's gonna be ten years now you have to have that imagination for the little technical like tactical move in the next three months like it's really hard to nail those if you have a process that can rip out things quickly and then only iterate the things that are working that'll serve you far better our mistake was that at justin.tv it was thinking every time we've got the home run let's only swing for home runs and of course it would take three months to do it because we got to make it perfect right and then the whole spike spiral of death alright um the last thing I'll say is my email address is Michael at Y Combinator comm strangely I tell people that I answer every email and people mostly don't believe me and the ones who do email me and I reply and so everyone I talk to you and everyone online there's really only two categories of people the people who don't believe me in which case great continue your lives and the people who will believe me and if you need help they'll email and I will try to help you the best I can it's really that simple you don't need to have networked with me Y Combinator is fairly easy to spell and so is Michael so you should be able to figure that out thank you [Applause] you